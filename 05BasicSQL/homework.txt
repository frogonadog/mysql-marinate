All exercises here concern the music database, which is available at http://tahaghoghi.com/LearningMySQL/Downloads/Files/Data/SQL_files_with_foreign_key_references/music.sql

I strongly recommend theta join style as per http://code.openark.org/blog/mysql/mysql-joins-on-vs-using-vs-theta-style - the nutshell is that ANSI style is like this:

SELECT ... FROM table1 INNER JOIN table2 WHERE field1=field2 AND filter=something;

Theta style is like this:
SELECT ... FROM table1 INNER JOIN table2 ON (field1=field2) WHERE filter=something;

The reason for this is that when you have many tables joined it's easier to see the join clause in ON or USING with theta style. 
If you join many tables and use ANSI style, where everything is in the WHERE clause, it's possible to forget some of the join clauses 
in the WHERE. If you put the join clauses in the JOIN part, it's way more readable.

1) Use one or more SELECT statements to find out how many tracks are on New Order's Brotherhood album.
SELECT COUNT(track_id) FROM track 
INNER JOIN album ON (track.album_id = album.album_id) 
INNER JOIN artist ON (artist.artist_id = album.artist_id) 
WHERE artist_name = 'New Order' and album_name = 'Brotherhood';
Result is 10

2) Using a join, list the albums that we own by the band New Order
SELECT album_name FROM album 
INNER JOIN artist ON (artist.artist_id = album.artist_id) 
WHERE artist_name = 'New Order';
Result:
Retro - John McCready FAN
Substance (Disc 2)
Retro - Miranda Sawyer POP
Retro - New Order / Bobby Gillespie LIVE
Power, Corruption & Lies
Substance 1987 (Disc 1)
Brotherhood

3) With INSERT statements, add the artist Leftfield to the database. For this new artist, add the album "Leftism" that has
the following tracks:
a. Release the Pressure (Time: 7.39)
b. Afro-Melt (Time: 7.33)
c. Melt (Time: 5.21)
d. Song of Life (Time: 6.55)
e. Original (Time: 6.00)
f. Black Flute (Time: 3.46)
g. Space Shanty (Time: 7.15)
h. Inspection Check One (Time: 6.30)
i. Storm 3000 (Time: 5.44)
j. Open Up (Time: 6.52)
k. 21st Century Poem (Time: 5.42)
l. Bonus Track (Time: 1.22)

The answer to this question should be the INSERT statement(s).
INSERT INTO artist (artist_id, artist_name) VALUES (7, "Leftfield");
INSERT INTO album (artist_id, album_id, album_name) VALUES (7, 1, "Leftism");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 1, "Release the Pressure", "7.39");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 2, "Afro-Melt", "7.33");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 3, "Melt", "5.21");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 4, "Song of Life", "6.55");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 5, "Original", "6.00");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 6, "Black Flute", "3.46");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 7, "Space Shanty", "7.15");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 8, "Inspection Check One", "6.30");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 9, "Storm 3000", "5.44");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 10, "Open Up", "6.52");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 11, "21st Century Poem", "5.42");
INSERT INTO track (artist_id, album_id, track_id, track_name, time) VALUES (7, 1, 12, "Bonus Track", "1.22");

4) How long in minutes is the Leftism album you added in Question 3? Hint: use the
SUM() aggregate function.
SELECT SUM(time) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id)
WHERE artist_name = 'Leftfield' AND 
album_name = 'Leftism';
Result: 67.99

5) Change the time for the Original track on the Leftism album to 6.22.
UPDATE track
SET time = '6.22'
WHERE (track.artist_id, track.album_id) =
(SELECT track.artist_id, track.album_id
FROM artist INNER JOIN album USING (artist_id)WHERE artist.artist_name = 'Leftfield' AND album.album_name = 'Leftism') AND
track.track_name = 'Original';

6) Remove the 'Bonus Track' from the Leftism album,
DELETE FROM track
WHERE (track.artist_id, track.album_id) =
(SELECT track.artist_id, track.album_id
FROM artist INNER JOIN album USING (artist_id)WHERE artist.artist_name = 'Leftfield' AND album.album_name = 'Leftism') AND
track.track_name = 'Bonus Track';
1 row deleted. ( Query took 0.0381 sec )